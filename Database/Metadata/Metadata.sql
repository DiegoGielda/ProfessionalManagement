/******************************************************************************/
/***         Generated by IBExpert 2020.4.21.2 07/10/2022 18:19:21          ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN LOGICAL AS
CHAR(1)
DEFAULT 'N'
CHECK (VALUE IN ('S','N'));



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_COMPANY;
SET GENERATOR GEN_COMPANY TO 1;

CREATE GENERATOR GEN_JOB;
SET GENERATOR GEN_JOB TO 0;

CREATE GENERATOR GEN_JOB_HISTORIC;
SET GENERATOR GEN_JOB_HISTORIC TO 0;

CREATE GENERATOR GEN_PERSON;
SET GENERATOR GEN_PERSON TO 0;

CREATE GENERATOR GEN_PERSON_EMPLOYEE;
SET GENERATOR GEN_PERSON_EMPLOYEE TO 0;

CREATE GENERATOR GEN_RECORD_SHEET;
SET GENERATOR GEN_RECORD_SHEET TO 0;



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE COMPANY (
    ID_COMPANY   INTEGER NOT NULL,
    DESCRIPTION  VARCHAR(50) NOT NULL
);

CREATE TABLE JOB (
    ID_JOB       INTEGER NOT NULL,
    DESCRIPTION  VARCHAR(30) NOT NULL,
    CD_COMPANY   INTEGER NOT NULL
);

CREATE TABLE JOB_HISTORIC (
    ID_JOB_HISTORIC   INTEGER NOT NULL,
    CD_PERSON         INTEGER NOT NULL,
    CD_JOB            INTEGER NOT NULL,
    CD_COMPANY        INTEGER NOT NULL,
    DATE_ADMISSION    DATE NOT NULL,
    DATE_RESIGNATION  DATE DEFAULT CURRENT_DATE NOT NULL
);

CREATE TABLE PERSON (
    ID_PERSON  INTEGER NOT NULL,
    NAME       VARCHAR(50) NOT NULL,
    CPF        CHAR(11) NOT NULL,
    CLASS_ONE  LOGICAL
);

CREATE TABLE PERSON_EMPLOYEE (
    ID_PERSON_EMPLOYEE  INTEGER NOT NULL,
    CD_PERSON           INTEGER NOT NULL,
    CD_JOB              INTEGER NOT NULL,
    DATE_ADMISSION      DATE DEFAULT CURRENT_DATE,
    ENROLLMENT          CHAR(10),
    PIS                 CHAR(12)
);

CREATE TABLE RECORD_SHEET (
    ID_RECORD_SHEET         INTEGER NOT NULL,
    CD_PERSON_EMPLOYEE      INTEGER NOT NULL,
    DATE_RECORD             DATE DEFAULT CURRENT_DATE NOT NULL,
    TIME_START_ONE          TIME DEFAULT CURRENT_TIME NOT NULL,
    TIME_END_ONE            TIME,
    TIME_START_TWO          TIME,
    TIME_END_TWO            TIME,
    INTERVAL_PERIOD         TIME,
    AMOUNT_HOUR_WORKED_DAY  TIME
);



/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE COMPANY ADD CONSTRAINT PK_COMPANY PRIMARY KEY (ID_COMPANY);
ALTER TABLE JOB ADD CONSTRAINT PK_JOB PRIMARY KEY (ID_JOB);
ALTER TABLE JOB_HISTORIC ADD CONSTRAINT PK_JOB_HISTORIC PRIMARY KEY (ID_JOB_HISTORIC);
ALTER TABLE PERSON ADD CONSTRAINT PK_PERSON PRIMARY KEY (ID_PERSON);
ALTER TABLE PERSON_EMPLOYEE ADD CONSTRAINT PK_PERSON_EMPLOYEE PRIMARY KEY (ID_PERSON_EMPLOYEE);
ALTER TABLE RECORD_SHEET ADD CONSTRAINT PK_RECORD_SHEET PRIMARY KEY (ID_RECORD_SHEET);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE JOB ADD CONSTRAINT FK_JOB_COMPANY FOREIGN KEY (CD_COMPANY) REFERENCES COMPANY (ID_COMPANY);
ALTER TABLE JOB_HISTORIC ADD CONSTRAINT FK_JOB_HISTORIC_JOB FOREIGN KEY (CD_JOB) REFERENCES JOB (ID_JOB);
ALTER TABLE JOB_HISTORIC ADD CONSTRAINT FK_JOB_HISTORIC_PERSON FOREIGN KEY (CD_PERSON) REFERENCES PERSON (ID_PERSON);
ALTER TABLE PERSON_EMPLOYEE ADD CONSTRAINT FK_PERSON_EMPLOYEE_JOB FOREIGN KEY (CD_JOB) REFERENCES JOB (ID_JOB);
ALTER TABLE PERSON_EMPLOYEE ADD CONSTRAINT FK_PERSON_EMPLOYEE_PERSON FOREIGN KEY (CD_PERSON) REFERENCES PERSON (ID_PERSON);
ALTER TABLE RECORD_SHEET ADD CONSTRAINT FK_RECORD_SHEET_PERSON_EMPLOYEE FOREIGN KEY (CD_PERSON_EMPLOYEE) REFERENCES PERSON_EMPLOYEE (ID_PERSON_EMPLOYEE);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: TBI_COMPANY */
CREATE TRIGGER TBI_COMPANY FOR COMPANY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF(NEW.ID_COMPANY IS NULL) THEN
  BEGIN
    NEW.ID_COMPANY = GEN_ID(GEN_COMPANY, 1);
  END
END
^

/* Trigger: TBI_JOB */
CREATE TRIGGER TBI_JOB FOR JOB
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF(NEW.ID_JOB IS NULL) THEN
  BEGIN
    NEW.ID_JOB = GEN_ID(GEN_JOB, 1);
  END
END
^

/* Trigger: TBI_JOB_HITORIC */
CREATE TRIGGER TBI_JOB_HITORIC FOR JOB_HISTORIC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF(NEW.ID_JOB_HISTORIC IS NULL) THEN
  BEGIN
    NEW.ID_JOB_HISTORIC = GEN_ID(GEN_JOB_HISTORIC, 1);
  END
END
^

/* Trigger: TBI_PERSON */
CREATE TRIGGER TBI_PERSON FOR PERSON
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF(NEW.ID_PERSON IS NULL) THEN
  BEGIN
    NEW.ID_PERSON = GEN_ID(GEN_PERSON, 1);
  END
END
^

/* Trigger: TBI_PERSON_EMPLOYEE */
CREATE TRIGGER TBI_PERSON_EMPLOYEE FOR PERSON_EMPLOYEE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF(NEW.ID_PERSON_EMPLOYEE IS NULL) THEN
  BEGIN
    NEW.ID_PERSON_EMPLOYEE = GEN_ID(GEN_PERSON_EMPLOYEE, 1);
  END
END
^

/* Trigger: TBI_RECORD_SHEET */
CREATE TRIGGER TBI_RECORD_SHEET FOR RECORD_SHEET
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF(NEW.ID_RECORD_SHEET IS NULL) THEN
  BEGIN
    NEW.ID_RECORD_SHEET = GEN_ID(GEN_RECORD_SHEET, 1);
  END
END
^
SET TERM ; ^



/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

DESCRIBE DOMAIN LOGICAL
'S-SIM   N-NAO';

